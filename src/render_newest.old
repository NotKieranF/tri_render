.INCLUDE	"render.h"

.ZEROPAGE
; Camera rotation matrix
camera_rot_xx:			.RES 1
camera_rot_xy:			.RES 1
camera_rot_xz:			.RES 1
camera_rot_yx:			.RES 1
camera_rot_yy:			.RES 1
camera_rot_yz:			.RES 1
camera_rot_zx:			.RES 1
camera_rot_zy:			.RES 1
camera_rot_zz:			.RES 1

; Object rotation matrix
object_rot_xx:			.RES 1
object_rot_xy:			.RES 1
object_rot_xz:			.RES 1
object_rot_yx:			.RES 1
object_rot_yy:			.RES 1
object_rot_yz:			.RES 1
object_rot_zx:			.RES 1
object_rot_zy:			.RES 1
object_rot_zz:			.RES 1

; Camera position
camera_x:				.RES 3
camera_y:				.RES 3
camera_z:				.RES 3

; Camera rotation
camera_yaw:				.RES 1
camera_pitch:			.RES 1
camera_roll:			.RES 1


.SEGMENT	"SAVERAM"
nametable_buffer:		.RES SCREEN_WIDTH * SCREEN_HEIGHT

pattern_buffer_0:		.RES RENDER_MAX_TILES
pattern_buffer_1:		.RES RENDER_MAX_TILES
pattern_buffer_2:		.RES RENDER_MAX_TILES
pattern_buffer_3:		.RES RENDER_MAX_TILES
pattern_buffer_4:		.RES RENDER_MAX_TILES
pattern_buffer_5:		.RES RENDER_MAX_TILES
pattern_buffer_6:		.RES RENDER_MAX_TILES
pattern_buffer_7:		.RES RENDER_MAX_TILES
pattern_buffer_8:		.RES RENDER_MAX_TILES
pattern_buffer_9:		.RES RENDER_MAX_TILES
pattern_buffer_A:		.RES RENDER_MAX_TILES
pattern_buffer_B:		.RES RENDER_MAX_TILES
pattern_buffer_C:		.RES RENDER_MAX_TILES
pattern_buffer_D:		.RES RENDER_MAX_TILES
pattern_buffer_E:		.RES RENDER_MAX_TILES
pattern_buffer_F:		.RES RENDER_MAX_TILES

; Transparency channel
alpha_buffer_0:			.RES RENDER_MAX_TILES
alpha_buffer_1:			.RES RENDER_MAX_TILES
alpha_buffer_2:			.RES RENDER_MAX_TILES
alpha_buffer_3:			.RES RENDER_MAX_TILES
alpha_buffer_4:			.RES RENDER_MAX_TILES
alpha_buffer_5:			.RES RENDER_MAX_TILES
alpha_buffer_6:			.RES RENDER_MAX_TILES
alpha_buffer_7:			.RES RENDER_MAX_TILES

;
display_list:			.RES RENDER_DISPLAY_LIST_SIZE
display_list_z:			.RES RENDER_MAX_POLYS
display_list_sort:		.RES RENDER_MAX_POLYS


; Overview of rendering
;
;	struct Point3D {
;		signed int x;
;		signed int y;
;		signed int z;
;	}
;
;	struct Rot3D {
;		unsigned char yaw;
;		unsigned char pitch;
;		unsigned char roll;
;	}
;
;	struct Object {
;		Point3D pos;
;		Rot3D rot;
;		Mesh* mesh;
;	}
;
;	struct Mesh {
;		int num_vertices;
;		Point3D[] vertices;
;		int num_polys;
;		Poly[] polys;
;	}
;
;	struct Poly {
;		int num_vertices;
;		int[] vertex_indices;
;		Vec3D norm;
;	}
;
;	struct Camera {
;		Point3D pos;
;		Rot3D rot;
;	}
;
;	int dot_product(Vec3D a, Vec3D b) {
;		return a.x * b.x + a.y * b.y + a.z * b.z;
;	}
;
;	void render(Object[] objects, int num_objects, Camera camera) {
;		
;
;		for (int i = 0; i < num_objects; i++) {
;			Point3D relative_pos;
;			relative_pos.x = objects[i].pos.x - camera.pos.x;
;			relative_pos.y = objects[i].pos.y - camera.pos.y;
;			relative_pos.z = objects[i].pos.z - camera.pos.z;
;
;			relative_pos.x = relative_pos.x * camera_matrix[0][0] + relative_pos.y * camera_matrix[0][1] + relative_pos.x * camera_matrix[0][2];
;			relative_pos.y = relative_pos.x * camera_matrix[1][0] + relative_pos.y * camera_matrix[1][1] + relative_pos.y * camera_matrix[1][2];
;			relative_pos.z = relative_pos.x * camera_matrix[2][0] + relative_pos.y * camera_matrix[2][1] + relative_pos.z * camera_matrix[2][2];
;
;			// Perform frustum culling
;			int inside_frustum = 1;
;			for (int j = 0; j < 6; j++) {
;				Vec3D dist;
;				Vec3D norm;
;
;				dist.x = frustum[j].pos.x;
;				dist.y = frustum[j].pos.y;
;				dist.z = frustum[j].pos.z;
;				norm = frustum[j].norm;
;
;				if (dot_product(dist, norm) > 0) {
;					inside_frustum = 0;
;					break;
;				}
;			}
;			if (inside_frustum == 0) {
;				continue;
;			}
;
;			// Transform and project each polygon
;			Point3D vertex_buffer[objects[i].mesh.num_vertices];
;			for (int j = 0; j < objects[i].mesh.num_polys; j++) {
;				// Perform back face culling
;				if (dot_product(objects[i].mesh.polys[j].norm, camera.norm) > 0)
;					continue;
;
;				// Compute the objects rotation matrix
;				signed char object_matrix[3][3];
;				Rot3D 
;				compute_rot_matrix(object_matrix, )
;
;				// Project each component vertex and cache them in the vertex buffer
;				for (int k = 0; k < objects[i].mesh.polys[j].num_vertices; k++) {
;					int vertex_index = objects[i].mesh.polys[j].vertex_indices[k];
;					Point3D vertex = objects[i].mesh.vertices[vertex_index];
;					Point3D relative_pos;
;
;					if (vertex_buffer[vertex_index] == NULL) {
;						relative_pos.x = vertex.x * object_matrix[0][0] + vertex.y * object_matrix[0][1] + vertex.x * object_matrix[0][2];
;						relative_pos.y = vertex.x * object_matrix[1][0] + vertex.y * object_matrix[1][1] + vertex.y * object_matrix[1][2];
;						relative_pos.z = vertex.x * object_matrix[2][0] + vertex.y * object_matrix[2][1] + vertex.z * object_matrix[2][2];
;
;						vertex_buffer[vertex_index] = relative_pos;
;					}
;
;				}				
;
;			}
;
;		}
;	}

.PROC	render

setup_camera_rot_matrix:
	LDX camera_yaw
	LDY camera_pitch
	LDA camera_roll

	JSR setup_rot_matrix

; Copy output into camera rot matrix
	LDX #3 * 3
:	LDA object_rot_xx, X
	STA camera_rot_xx, X
	DEX
	BPL :-

transform_objects:
	LDX #MAX_OBJECTS - 1
@loop:
	LDA object_id, X
	BEQ @next

@next:
	DEX
	BPL @loop
	
	RTS

.ENDPROC







; Polygon clipping
;	Iterate through an input list of vertices. If the current vertex is within the viewport, add it to the output list.
;
;	struct Point2D {
;		signed short x;
;		signed short y;
;	}
;
;	const signed short SCREEN_WIDTH = 100;
;	const signed short SCREEN_HEIGHT = 100;
;
;	void clip_poly(Point2D[] input, int input_size, Point2D output, int output_size) {
;
;		// Clip against the left edge of the screen
;		for (int i = 0; i < input_size; i++) {
;			// If vertex is within the left edge of the screen, copy it over to the output list
;			if (input[i].x > -SCREEN_WIDTH) {
;				output[output_size] = input[i];
;				output_size++;
;			}
;
;			// If the current and next vertex aren't on the same side of the left edge of the screen, we cross the edge and need to add a new vertex to the output list
;			// where the crossing occurs
;			if (input[i].x > -SCREEN_WIDTH != input[i - 1].x > -SCREEN_WIDTH) {
;				dx = input[i].x - input[i + 1].x;
;				dy = input[i].y - input[i + 1].y;
;				slope = dy / dx;
;
;				Point2D new_vertex;
;
;				new_vertex.x = -SCREEN_WIDTH;
;				new_vertex.y = (input[i].x - SCREEN_WIDTH) * slope + input[i].y;
;
;				output[output_size] = new_vertex;
;				output_size++;
;			}
;
;		}
;	
;
;	}
.CODE
.PROC	clip_poly_2d


pre_check_vertices:
	LDX #$00
@loop:
; Check if vertex is to the left of the left edge of the viewport
	LDA input_buffer_x_lo, X
	CMP #<LEFT_EDGE
	LDA input_buffer_x_hi, X
	SBC #>LEFT_EDGE
	BVC :+
	EOR #$80
:	BMI out_of_bounds

; Check if vertex is to the right of the right edge of the viewport
	LDA #<RIGHT_EDGE
	CMP input_buffer_x_lo, X
	LDA #>RIGHT_EDGE
	SBC input_buffer_x_hi, X
	BVC :+
	EOR #$80
:	BMI out_of_bounds

; Check if vertex is above the top edge of the viewport
	LDA input_buffer_y_lo, X
	CMP #<TOP_EDGE
	LDA input_buffer_y_hi, X
	SBC #>TOP_EDGE
	BVC :+
	EOR #$80
:	BMI out_of_bounds

; Check if vertex is below the bottom edge of the viewport
	LDA #<BOTTOM_EDGE
	CMP input_buffer_y_lo, X
	LDA #>BOTTOM_EDGE
	SBC input_buffer_y_lo, X
	BVC :+
	EOR #$80
:	BMI out_of_bounds

	INX
	CPX input_size
	BNE @loop

	RTS

out_of_bounds:


.ENDPROC



.CODE
.PROC	clip_poly

.PUSHSEG
.ZEROPAGE
input_buffer_x_lo:		.RES ::RENDER_MAX_VERTICES
input_buffer_x_hi:		.RES ::RENDER_MAX_VERTICES
input_buffer_y_lo:		.RES ::RENDER_MAX_VERTICES
input_buffer_y_hi:		.RES ::RENDER_MAX_VERTICES
output_buffer_x_lo:		.RES ::RENDER_MAX_VERTICES
output_buffer_x_hi:		.RES ::RENDER_MAX_VERTICES
output_buffer_y_lo:		.RES ::RENDER_MAX_VERTICES
output_buffer_y_hi:		.RES ::RENDER_MAX_VERTICES

input_size:				.RES 1
output_size:			.RES 1
dx:						.RES 2
dy:						.RES 2
slope:					.RES 2
prev:					.RES 1
.POPSEG

; Loop through the input buffer and check if each vertex is within the left clipping plane
.PROC	check_side_io
	LDX #$00
@loop:
	LDA input_buffer_x_lo, X
	CMP #<LEFT_EDGE
	LDA input_buffer_x_hi, X
	SBC #>LEFT_EDGE
	BVC :+
	EOR #$80
:	BMI clip_left_io			; If we encounter a vertex outside of the left clipping plane, then we need to clip from the input buffer to the output buffer
	INX
	CPX input_size
	BNE @loop
	JMP check_right_io			; Otherwise we can continue to check the right clipping plane
.ENDPROC

; Loop through the remaining input buffer and clip vertices to the left clipping plane
.PROC	clip_left_io
	STX output_size
@copy_loop:
	LDA input_buffer_x_lo, X
	STA output_buffer_x_lo, X
	LDA input_buffer_x_hi, X
	STA output_buffer_x_hi, X
	LDA input_buffer_y_lo, X
	STA output_buffer_y_lo, X
	LDA input_buffer_y_hi, X
	STA output_buffer_y_hi, X
	DEX
	BPL @copy_loop

	LDX output_size
	LDY output_size
@loop:
	LDA input_buffer_x_lo, X
	CMP #<LEFT_EDGE
	LDA input_buffer_x_hi, X
	SBC #>LEFT_EDGE
	BVC :+
	EOR #$80
:	PHP
@check_crossing:
	AND #$80
	CMP prev
	BEQ @no_crossing
	STA prev
@crossing:
	LDA input_buffer_x_lo, X
	SEC
	SBC input_buffer_x_lo - 1, X
	STA dx + 0
	LDA input_buffer_x_hi, X
	SBC input_buffer_x_hi - 1, X
	STA dx + 1

	LDA input_buffer_y_lo, X
	SEC
	SBC input_buffer_y_lo - 1, X
	STA dy + 0
	LDA input_buffer_y_hi, X
	SBC input_buffer_y_hi - 1, X
	STA dy + 1


@no_crossing:
	PLP
	BMI @no_copy
@copy_vertex:
	LDA input_buffer_x_lo, X
	STA output_buffer_x_lo, Y
	LDA input_buffer_x_hi, X
	STA output_buffer_x_hi, Y
	LDA input_buffer_y_lo, X
	STA output_buffer_y_lo, Y
	LDA input_buffer_y_hi, X
	STA output_buffer_y_hi, Y
	INY
@no_copy:
	INX
	CPX input_size
	BNE @loop

	STY output_size
	JMP check_right_oi
.ENDPROC

.PROC	check_right_io

check_top_io:

check_bottom_io:

check_right_oi:

check_top_oi:

check_bottom_oi:












clip_left:
	LDX #$00
	LDY #$00
@loop:
	LDA input_buffer_x_lo, X
	CMP #<LEFT_EDGE
	LDA input_buffer_x_hi, X
	SBC #>LEFT_EDGE
	BVC :+
	EOR #$80
:	PHP
@check_crossing:
	AND #$80							; Check if we're on the opposite side of the clipping plane compared to last vertex
	CMP prev
	BEQ @no_crossing
	STA prev							; Store the side we're currently on for next loop
@crossing:
	LDA input_buffer_x_lo, X
	SEC
	SBC input_buffer_x_lo - 1, X
	STA dx + 0
	LDA input_buffer_x_hi, X
	SBC input_buffer_x_hi - 1, X
	STA dx + 1

	LDA input_buffer_y_lo, X
	SEC
	SBC input_buffer_y_lo - 1, X
	STA dy + 0
	LDA input_buffer_y_hi, X
	SBC input_buffer_y_hi - 1, X
	STA dy + 1

@no_crossing:
	PLP
	BMI @no_copy
@copy_vertex:
	LDA input_buffer_x_lo, X
	STA output_buffer_x_lo, Y
	LDA input_buffer_x_hi, X
	STA output_buffer_x_hi, Y
	LDA input_buffer_y_lo, X
	STA output_buffer_y_lo, Y
	LDA input_buffer_y_hi, X
	STA output_buffer_y_hi, Y
	INY
@no_copy:

	INX
	CPX input_size
	BNE @loop


clip_top:

clip_right:

clip_bottom:

.ENDPROC










; 3D rotation matrix
;	cos(y)cos(p)			cos(y) sin(p)sin(r) - sin(y)cos(r)													cos(y) sin(p)cos(r) + sin(y)sin(r)
;	sin(y)cos(p)			sin(y) sin(p)sin(r) + cos(y)cos(r)													sin(y) sin(p)cos(r) - cos(y)sin(r)
;	-sin(p)					cos(p)sin(r)																		cos(p)cos(r)

; cos(y) * (cos(p - r) - cos(p + r)) / 2 - sin(y) * cos(r)
; (cos(y) * cos(p - r) - cos(y) * cos(p + r)) / 2 - sin(y) * cos(r)
; cos(y - p + r) + cos(y + p - r) - cos(y - p - r) - cos(y + p + r) - sin(y + r) - sin(y - r)
; XY: qcos(y-p+r) + qcos(y+p-r) - qcos(y-p-r) - qcos(y+p+r) - hsin(y+r) - hsin(y-r)

; cos(y) * (sin(p + r) + sin(p - r)) + sin(y)sin(r)
; (cos(y)sin(p + r) + cos(y)sin(p - r)) + cos(y - r) - cos(y + r)
; sin(y + p + r) - sin(y - p - r) + sin(y + p - r) - sin(y - p + r) + cos(y - r) - cos(y + r)
; XZ: qsin(y+p+r) - qsin(y-p-r) + qsin(y+p-r) - qsin(y-p+r) + hcos(y-r) - hcos(y+r)

; sin(y) * (cos(p - r) - cos(p + r)) + cos(y)cos(r)
; (sin(y)cos(p - r) - sin(y)cos(p + r)) + cos(y - r) + cos(y + r)
; (sin(y + p - r) + sin(y - p + r) - sin(y + p + r) - sin(y - p - r)) + cos(y - r) + cos(y + r)
; YY: qsin(y+p-r) + qsin(y-p+r) - qsin(y+p+r) - qsin(y-p-r) + hcos(y-r) + hcos(y+r)

; sin(y) * (sin(p + r) + sin(p - r)) - cos(y)sin(r)
; (sin(y)sin(p + r) + sin(y)sin(p - r)) - sin(y + r) + sin(y - r)
; (cos(y - p - r) - cos(y + p + r) + cos(y - p + r) - cos(y + p - r)) - sin(y + r) + sin(y - r)
; YZ: qcos(y-p-r) - qcos(y+p+r) + qcos(y-p+r) - qcos(y+p-r) - sin(y+r) + sin(y-r)

; XY: [qcos(y-p+r) - qcos(y+p+r) - hsin(y+r)] - [qcos(y-p-r) - qcos(y+p-r) + hsin(y-r)]
; YZ: [qcos(y-p+r) - qcos(y+p+r) - hsin(y+r)] + [qcos(y-p-r) - qcos(y+p-r) + hsin(y-r)]

; XZ: [qsin(y+p-r) - qsin(y-p-r) + hcos(y-r)] - [qsin(y-p+r) - qsin(y+p+r) + hcos(y+r)]
; YY: [qsin(y+p-r) - qsin(y-p-r) + hcos(y-r)] + [qsin(y-p+r) - qsin(y+p+r) + hcos(y+r)]


;	hcos(y-p) + hcos(y+p)	[qcos(y-p+r) + qcos(y-p-r) - hsin(y+r)] + [qcos(y+p+r) + qcos(y+p-r) - hsin(y-r)]	[qsin(y+p-r) - qsin(y-p-r) + hcos(y-r)] - [qsin(y-p+r) - qsin(y+p+r) + hcos(y+r)]
;	hsin(y+p) + hsin(y-p)	[qsin(y+p-r) - qsin(y-p-r) + hcos(y-r)] + [qsin(y-p+r) - qsin(y+p+r) + hcos(y+r)]	[qcos(y-p+r) + qcos(y-p-r) - hsin(y+r)] - [qcos(y+p+r) + qcos(y+p-r) - hsin(y-r)]
;	-sin(p)					hsin(p+r) - hsin(p-r)																hcos(p-r) + hcos(p+r)

;	common1 = qcos(y-p+r) + qcos(y-p-r) - hsin(y+r)
;	common2 = qsin(y+p-r) - qsin(y-p-r) + hcos(y-r)
;	common3 = qcos(y+p+r) + qcos(y+p-r) - hsin(y-r)
;	common4 = qsin(y-p+r) - qsin(y+p+r) + hcos(y+r)

;	XX hcos(y-p) + hcos(y+p)		XY common1 + common3		XZ common1 - common3
;	YX hsin(y+p) + hsin(y-p)		YY common2 + common4		YZ common2 - common4
;	ZX -sin(p)						ZY hsin(p+r) - hsin(p-r)	ZZ hcos(p-r) + hcos(p+r)
; ~411 cycles, 375 w/o CMP/ROR
.CODE
.PROC	setup_rot_matrix
yaw			:= $00		; Tait-Bryan angles
pitch		:= $01
roll		:= $02

y_plus_p	:= $03		; Common angle calculations
y_minus_p	:= $04

	STX yaw
	STY pitch
	STA roll

; xx = hcos(y-p) + hcos(y+p)
; xy = hsin(y+p) + hsin(y-p)
compute_xx_xy:
	LDA yaw
	SEC
	SBC pitch
	STA y_minus_p
	TAY

	LDA yaw
	CLC
	ADC pitch
	STA y_plus_p
	TAX

	LDA hcos, Y
	CLC
	ADC hcos, X
	CMP #$80
	ROR
	STA rot_xx

	LDA hsin, X
	CLC
	ADC hsin, Y
	CMP #$80
	ROR
	STA object_rot_xy

; zx = -sin(p)
compute_zx:
	LDA pitch
	CLC
	ADC #$80
	TAX

	LDA sin, X
	CMP #$80
	ROR
	STA object_rot_zx

; zy = hsin(p+r) - hsin(p-r)
; zz = hcos(p-r) + hcos(p+r)
compute_zy_zz:
	LDA pitch
	CLC
	ADC roll
	TAY

	LDA pitch
	SEC
	SBC roll
	TAX

	LDA hsin, Y
	SEC
	SBC hsin, X
	CMP #$80
	ROR
	STA rot_zy

	LDA hcos, X
	CLC
	ADC hcos, Y
	CMP #$80
	ROR
	STA object_rot_zz


; xy = qcos(y+p+r) + qcos(y+p-r) - hsin(y-r)
; xz = qcos(y+p+r) + qcos(y+p-r) - hsin(y-r)
compute_xy_xz:
	LDA y_plus_p
	CLC
	ADC roll
	TAY

	LDA y_plus_p
	SEC
	SBC roll
	TAX
	LDA qcos, Y
	CLC
	ADC qcos, X
	TAY

	LDA yaw
	SEC
	SBC roll
	TAX
	TYA
	SEC
	SBC hsin, X
	STA object_rot_xy
	STA object_rot_xz

; xy = qcos(y-p+r) + qcos(y-p-r) - hsin(y+r) + xy
; xz = qcos(y-p+r) + qcos(y-p-r) - hsin(y+r) - xz
	LDA y_minus_p
	CLC
	ADC roll
	TAY

	LDA y_minus_p
	SEC
	SBC roll
	TAX
	LDA qcos, Y
	CLC
	ADC qcos, X
	TAY

	LDA yaw
	CLC
	ADC roll
	TAX
	TYA
	SEC
	SBC hsin, X
	TAY
	CLC
	ADC rot_xy
	CMP #$80
	ROR
	STA rot_xy

	TYA
	SEC
	SBC object_rot_xz
	CMP #$80
	ROR
	STA object_rot_xz

; yy = qsin(y-p+r) - qsin(y+p+r) + hcos(y+r)
; yz = qsin(y-p+r) - qsin(y+p+r) + hcos(y+r)
compute_yy_yz:
	LDA y_minus_p
	CLC
	ADC roll
	TAY

	LDA y_plus_p
	CLC
	ADC roll
	TAX
	LDA qsin, Y
	SEC
	SBC qsin, X
	TAY

	LDA yaw
	CLC
	ADC roll
	TAX
	TYA
	CLC
	ADC hcos, X
	STA object_rot_yy
	STA object_rot_yz

; yy = qsin(y+p-r) - qsin(y-p-r) + hcos(y-r) + yy
; yz = qsin(y+p-r) - qsin(y-p-r) + hcos(y-r) - yz
	LDA y_plus_p
	SEC
	SBC	roll
	TAY

	LDA y_minus_p
	SEC
	SBC roll
	TAX
	LDA qsin, Y
	SEC
	SBC qsin, X
	TAY

	LDA yaw
	SEC
	SBC roll
	TAX
	TYA
	CLC
	ADC hcos, X
	TAY
	CLC
	ADC rot_yy
	CMP #$80
	ROR
	STA rot_yy

	TYA
	SEC
	SBC object_rot_yz
	CMP #$80
	ROR
	STA object_rot_yz

	RTS
.ENDPROC



.CODE
.PROC	dot_product_3d

.ENDPROC
























.RODATA
.ALIGN	256
object_mul_lo:
.REPEAT	160, i
	.LOBYTES	(i * i) / 4	
.ENDREP
.REPEAT	96, i
	.LOBYTES	((i - 96) * (i - 96)) / 4
.ENDREP
.REPEAT	96, i
	.LOBYTES	(i * i) / 4
.ENDREP
.REPEAT	160, i
	.LOBYTES	((i - 160) * (i - 160)) / 4
.ENDREP

object_mul_hi:
.REPEAT	160, i
	.HIBYTES	(i * i) / 4	
.ENDREP
.REPEAT	96, i
	.HIBYTES	((i - 96) * (i - 96)) / 4
.ENDREP
.REPEAT	96, i
	.HIBYTES	(i * i) / 4
.ENDREP
.REPEAT	160, i
	.HIBYTES	((i - 160) * (i - 160)) / 4
.ENDREP













; Multiplies a point provided in
;	Takes: 7-bit signed input vector in $17, $18, $19 (x, y, z)
;	Returns: 16-bit signed output vector in $1A - $1B, $1C - $1D, $1E - $1F (x, y, z)
;	Clobbers: A, X, Y, $17 - $1F
.PROC	transform_point_combined_matrix_old
	input_x			:= $17
	input_y			:= $18
	input_z			:= $19
	output_x		:= $1A	; And $1B
	output_y		:= $1C	; And $1D
	output_z		:= $1E	; And $1F

column_x:
	LDA input_x
	SET_FAST_MUL

	@row_x:
		LDY camera_matrix + ROT_MATRIX::XX
		FAST_MUL output_x + 0
		STA output_x + 1

	@row_y:
		LDY camera_matrix + ROT_MATRIX::XY
		FAST_MUL output_y + 0
		STA output_y + 1

	@row_z:
		LDY camera_matrix + ROT_MATRIX::XZ
		FAST_MUL output_z + 0
		STA output_z + 1

column_y:
	LDA input_y
	SET_FAST_MUL

	@row_x:
		LDY camera_matrix + ROT_MATRIX::YX
		FAST_MUL
		TAY
		TXA
		CLC
		ADC output_x + 0
		STA output_x + 0
		TYA
		ADC output_x + 1
		STA output_x + 1

	@row_y:
		LDY camera_matrix + ROT_MATRIX::YY
		FAST_MUL
		TAY
		TXA
		CLC
		ADC output_y + 0
		STA output_y + 0
		TYA
		ADC output_y + 1
		STA output_y + 1

	@row_z:
		LDY camera_matrix + ROT_MATRIX::YZ
		FAST_MUL
		TAY
		TXA
		CLC
		ADC output_z + 0
		STA output_z + 0
		TYA
		ADC output_z + 1
		STA output_z + 1

column_z:
	LDA input_z
	SET_FAST_MUL

	@row_x:
		LDY camera_matrix + ROT_MATRIX::ZX
		FAST_MUL
		TAY
		TXA
		CLC
		ADC output_x + 0
		STA output_x + 0
		TYA
		ADC output_x + 1
		STA output_x + 1

	@row_y:
		LDY camera_matrix + ROT_MATRIX::ZY
		FAST_MUL
		TAY
		TXA
		CLC
		ADC output_y + 0
		STA output_y + 0
		TYA
		ADC output_y + 1
		STA output_y + 1

	@row_z:
		LDY camera_matrix + ROT_MATRIX::ZZ
		FAST_MUL
		TAY
		TXA
		CLC
		ADC output_z + 0
		STA output_z + 0
		TYA
		ADC output_z + 1
		STA output_z + 1

exit:
	RTS
.ENDPROC

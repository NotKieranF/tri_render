


;
; poly struct format: Byte containing color and number of vertices, followed by Y and X coordinate pairs for each vertex, starting with the topmost, with clockwise winding order

;	draw_poly_filled(poly_ptr) {
;		num_vertices = (poly_ptr[0] & 0xF0) >> 3
;		color = poly_ptr[0] & 0x0F
;		poly_ptr += 1
;
;		left_vertex = 2
;		right_vertex = num_vertices
;
;		left_current_x = poly_ptr[0]
;		right_current_x = poly_ptr[0]
;		left_current_y = poly_ptr[1]
;		right_current_y = poly_ptr[1]
;
;		init_left()
;		init_right()
;
;		y_min = left_current_y
;		y_max = y_min
;
;		do {
;			if (y_max >= 8) {
;				fill_row(y_min, y_max)
;				y_min = 0
;				y_max = 0
;				x_min = 255
;				x_max = 0
;			}
;
;			left_buffer[y_max] = step_left()
;			if (left_buffer[y_max] < x_min)
;				x_min = left_buffer[y_max]
;
;			right_buffer[y_max] = step_right()
;			if (right_buffer[y_max] > x_max)
;				x_max = right_buffer[y_max]
;
;			y_max += 1
;		} while (left_current_x != right_current_x || left_current_y != right_current_y)
;
;		fill_row(y_min, y_max)
;
;	}

;	y_max = y_min = poly_ptr[0] % 8
;
;	left_buffer[pixel_y] = poly_ptr[1]
;	x_min = poly_ptr[1]
;	right_buffer[pixel_y] = poly_ptr[1]
;	x_max = poly_ptr[1]
;
;	do {
;
;		left_buffer[y_max] = step_left()
;		if (left_buffer[y_max] < x_min)
;			x_min = left_buffer[y_max]
;
;		right_buffer[y_max] = step_right()
;		if (right_buffer[y_max] > x_max)
;			x_max = right_buffer[y_max]
;
;		if (y_max >= 8) {
;			fill_row(y_min, y_max)
;			y_min = 0
;			y_max = 0
;			x_min = 255
;			x_max = 0
;		}
;		y_max += 1
;
;	} while (left_current_x != right_current_x || left_current_y != right_current_y);



;	step_left() {
;		if (left_current_x == left_target_x && left_current_y == left_current_y) {
;			init_left()					// If this ends up being the bottom-most vertex, init_left will exit this function as well
;		}
;
;		if error >= hdy
;			if x_cur == x_targ break
;			error = error - dy
;			x_cur = x_cur + sx
;		end if
;
;		if hdx >= error
;			if y_cur == y_targ break
;			error = error + dx
;			y_cur += 1
;		end if
;
;		return x_cur
;	}

;	init_left() {
;		left_target_x = poly_ptr[left_vertex + 0]
;		left_target_y = poly_ptr[left_vertex + 1]
;
;		if (left_target_x - left_current_x < 0) {
;			// We've reached the bottom
;		} else {
;			left_dy = left_target_x - left_current_x
;		}
;
;		if (left_target_x - left_current_x < 0) {
;			left_dx = left_current_x - left_target_x
;			left_sx = -1;
;		} else {
;			left_dx = -1 * (left_current_x - left_target_x)
;			left_sx = 1;
;		}
;
;		error = left_dx - left_dy
;
;		left_vertex += 2;
;	}



.PROC	draw_poly_filled
	PIXEL_MASK		= %00000111
	VERTEX_MASK		= %11110000
	COLOR_MASK		= %00001111

.PUSHSEG
.ZEROPAGE
poly_ptr:			.RES 2	; Pointer to a struct containing polygon data
num_vertices:		.RES 1	; Number of vertices in the current polygon
color:				.RES 1	; Fill color of the current polygon

tile_x:				.RES 1
tile_y:				.RES 1
counter:			.RES 1

bres_vertex:		.RES 2	; Index into the polygon struct
bres_target_x:		.RES 2
bres_target_y:		.RES 2
bres_current_x:		.RES 2
bres_current_y:		.RES 2
bres_dx:			.RES 2
bres_hdx:			.RES 2
bres_dy:			.RES 2
bres_hdy:			.RES 2
bres_error_lo:		.RES 2
bres_error_hi:		.RES 2
bres_sx:			.RES 2

fill_left_buffer:	.RES 8	; X positions of the leftmost pixel in each pixel row, in the current tile row
fill_right_buffer:	.RES 8	; X positions of the rightmost pixel in each pixel row, in the current tile row
fill_y_min:			.RES 1
fill_y_max:			.RES 1
fill_x_min:			.RES 1
fill_x_max:			.RES 1

.POPSEG

	LDY #$00
extract_color:
	LDA (poly_ptr), Y
	AND #COLOR_MASK
	STA color

extract_num_vertices:
	LDA (poly_ptr), Y
	AND #VERTEX_MASK
	LSR
	LSR
	LSR
	STA bres_vertex + 1
	LDA #$02
	STA bres_vertex + 0
	STA counter

; Point poly_ptr at first vertex
	INC poly_ptr + 0
	BNE :+
	INC poly_ptr + 1
:

setup_top_vertex:
	LDA (poly_ptr), Y
	STA bres_current_y + 0
	STA bres_current_y + 1
	AND #PIXEL_MASK
	STA fill_y_min
	STA fill_y_max

	INY
	LDA (poly_ptr), Y
	STA bres_current_x + 0
	STA bres_current_x + 1
	LDY fill_y_max
	STA fill_left_buffer, Y
	STA fill_right_buffer, Y

	LDX #$00
	JSR setup_bresenham
	INX
	JSR setup_bresenham

draw_loop:

@handle_left:
	LDX #$00
	JSR step_bresenham
	CMP fill_x_min
	BCS :+
	STA fill_x_min
:	STA fill_left_buffer, Y		; assert(Y < 8)

@handle_right:
	INX
	JSR step_bresenham
	CMP fill_x_max
	BCC :+
	STA fill_x_max
:	STA fill_right_buffer, Y	; assert(Y < 8)

@check_fill:
	CPY #$08
	BCC :+
		JSR fill_row
		LDY #$FF
		STY fill_x_min
		INY
		STY fill_x_max
		STY fill_y_min
		STY fill_y_max
:

@check_loop:
	LDA counter
	BNE draw_loop

	RTS

	.PROC	fill_row
		RTS
	.ENDPROC

	; Steps along a line via the bresenham algorithm until it moves along the Y axis
	; Returns the current X position of the line in A
	; Clobbers A/Y
	; X = 0 for left line, X = 1 for right line
	.PROC	step_bresenham
	; assert(X == 0 || X == 1)
	check_vertex:
		LDA bres_current_x, X
		CMP bres_target_x, X
		BNE @not_at_vertex
		LDA bres_current_y, X
		CMP bres_target_y
		BNE @not_at_vertex
	@at_vertex:
		JSR setup_bresenham
	@not_at_vertex:

	handle_x:
		LDA bres_error_lo, X
		CMP bres_hdy, X
		LDA bres_error_hi, X
		SBC #$FF
		BVC :+
		EOR #$80
	:	BMI handle_y					; Branch if hdy > error

		LDA bres_current_x, X
		CMP bres_target_x, X
		BEQ handle_y

		@adjust_error:
			LDA bres_error_lo, X
			SEC
			SBC bres_dy, X
			STA bres_error_lo, X
			LDA bres_error_hi, X
			SBC #$00
			STA bres_error_hi, X

		@adjust_x_pos:
			LDA bres_current_x, X
			CLC
			ADC bres_sx, X
			STA bres_current_x, X

	handle_y:
		LDA bres_hdx, X
		CMP bres_error_lo, X
		LDA #$00
		SBC bres_error_hi, X
		BVC :+
		EOR #$80
	:	BMI check_vertex						; Branch if hdx < error 136

		LDA bres_current_y, X
		CMP bres_target_y, X
		BEQ check_vertex

		@adjust_error:
			LDA bres_error_lo, X
			CLC
			ADC bres_dx, X
			STA bres_error_lo, X
			LDA bres_error_hi, X
			ADC #$00
			STA bres_error_hi, X

		@adjust_y_pos:
			INC bres_current_y, X
			LDA bres_current_x, X
			RTS

	.ENDPROC

	;
	; X = 0 for left line, X = 1 for right line
	.PROC	setup_bresenham
	; assert(X == 0 || X == 1)
		STY fill_y_max
	handle_y:
		LDY bres_vertex, X
		LDA (poly_ptr), Y
		STA bres_target_y, X

		SEC
		SBC bres_current_y, X
		BEQ @neg
		BCS @pos
	@neg:
		LDY fill_y_max
		DEC counter
		PLA								; If Y displacement is negative, we've reached the bottom-most vertex
		PLA
		RTS

	@pos:
		STA bres_dy, X
		LSR
		EOR #$FF
		CLC
		ADC #$01
		STA bres_hdy, X

	handle_x:
		INY
		LDA (poly_ptr), Y
		STA bres_target_x, X

		SEC
		SBC bres_current_x, X
		BCS @pos
	@neg:
		EOR #$FF
	;	CLC
		ADC #$01
		STA bres_dx, X
		LSR
		STA bres_hdx, X
		LDA #$FF
		STA bres_sx, X
		BNE compute_error				; Effectively BRA

	@pos:
		STA bres_dx, X
		LSR
		STA bres_hdx, X
		LDA #$01
		STA bres_sx, X

	compute_error:
		LDA bres_dx, X
		SEC
		SBC bres_dy, X
		STA bres_error_lo, X
		LDA #$00
		SBC #$00
		STA bres_error_hi, X

	exit:
		TYA
		CLC
		ADC next_vertex_table, X		; Advance vertex index by 1 for left, -3 for right
		STA bres_vertex, X
		LDY fill_y_max

		RTS

	.PUSHSEG
		.RODATA
		next_vertex_table:
		.BYTE	$01, $FD
	.POPSEG
	.ENDPROC

.ENDPROC






	LDY y1
	LDX x1
	LDA #$80
:	JSR plot
	ADC q
	INX
	BCC :-
	INY




.EXPORT		test_draw_poly


test_poly:
.BYTE	$30
.BYTE	$10, $10
.BYTE	$20, $70
.BYTE	$80, $80
.BYTE	$80, $10

test_draw_poly:
	LDA #<test_poly
	STA draw_poly_filled::poly_ptr + 0
	LDA #>test_poly
	STA draw_poly_filled::poly_ptr + 1
	JSR draw_poly_filled

:	JMP :-










; ///////TEMP
.END

;
.PROC	render_poly_wireframe
poly_ptr		:= $00	; And $01


.ENDPROC



.PROC	render_line
PIXEL_MASK	= %00000111
TILE_MASK	= %11111000

.PUSHSEG
.ZEROPAGE
x0:				.RES 1
x1:				.RES 1
y0:				.RES 1
y1:				.RES 1

pixel_x:		.RES 1
pixel_y:		.RES 1
tile_x:			.RES 1
tile_y:			.RES 1

tile_buffer:	.RES 8
.POPSEG

	LDA pixel_x
	AND #TILE_MASK
	STA tile_x

	LDA pixel_y
	AND #TILE_MASK
	STA tile_y

loop:
	LDA pixel_y
	AND #PIXEL_MASK
	TAY
	LDA pixel_x
	AND #PIXEL_MASK
	TAX
	LDA table, X
	STA tile_buffer, Y

	; Step line here
	INC pixel_x
	INC pixel_y

check_x_axis:
	LDA pixel_x					; Check if we've moved to a new tile in the x axis
	AND #TILE_MASK
	CMP tile_x
	STA tile_x
	BNE plot_tile

check_y_axis:
	LDA pixel_y					; Check if we've moved to a new tile in the y axis
	AND #TILE_MASK
	CMP tile_y
	STA tile_y
	BNE plot_tile

check_loop:
	LDA pixel_x
	CMP x1
	BNE loop
	LDA pixel_y
	CMP y1
	BNE loop


plot_tile:
	LDA tile_x
	LSR
	LSR
	LSR
	TAY

	LDA tile_y
	LSR
	LSR
	LSR
	TAX

	LDA plot_lo, X
	STA ptr + 0
	LDA plot_hi, X
	STA ptr + 1
	LDA (ptr), Y
	BEQ @unoccupied

@occupied:						; Combine current tile with existing tile
	TAX
	LDA pattern_buffer_0, X
	ORA tile_buffer + 0
	STA pattern_buffer_0, X
	LDA pattern_buffer_1, X
	ORA tile_buffer + 1
	STA pattern_buffer_1, X
	LDA pattern_buffer_2, X
	ORA tile_buffer + 2
	STA pattern_buffer_2, X
	LDA pattern_buffer_3, X
	ORA tile_buffer + 3
	STA pattern_buffer_3, X
	LDA pattern_buffer_4, X
	ORA tile_buffer + 4
	STA pattern_buffer_4, X
	LDA pattern_buffer_5, X
	ORA tile_buffer + 5
	STA pattern_buffer_5, X
	LDA pattern_buffer_6, X
	ORA tile_buffer + 6
	STA pattern_buffer_6, X
	LDA pattern_buffer_7, X
	ORA tile_buffer + 7
	STA pattern_buffer_7, X

	JMP clear_buffer

@unoccupied:					; Allocate a new tile
	INC free_tile
	LDA free_tile
	STA (ptr), Y
	TAX

	LDA tile_buffer + 0
	STA pattern_buffer_0, X
	LDA tile_buffer + 1
	STA pattern_buffer_1, X
	LDA tile_buffer + 2
	STA pattern_buffer_2, X
	LDA tile_buffer + 3
	STA pattern_buffer_3, X
	LDA tile_buffer + 4
	STA pattern_buffer_4, X
	LDA tile_buffer + 5
	STA pattern_buffer_5, X
	LDA tile_buffer + 6
	STA pattern_buffer_6, X
	LDA tile_buffer + 7
	STA pattern_buffer_7, X

@clear_buffer:
	LDA #$00
	STA tile_buffer + 0
	STA tile_buffer + 1
	STA tile_buffer + 2
	STA tile_buffer + 3
	STA tile_buffer + 4
	STA tile_buffer + 5
	STA tile_buffer + 6
	STA tile_buffer + 7

	JMP check_loop

;
;	render_line(x0, y0, x1, y1) {
;		PIXEL_MASK = 0b00000111
;		TILE_MASK = 0b11111000
;
;		tile_x = x0 & TILE_MASK
;		tile_y = y0 & TILE_MASK
;		pixel_x = x0
;		pixel_y = y0
;
;		while (pixel_x != x1 && pixel_y != y1) {
;			tile_buffer[pixel_y & PIXEL_MASK] = table[pixel_x & PIXEL_MASK]
;			step_bresenham()		// Move one pixel along the line
;
;			// Flush buffer if we've moved to a new tile
;			if (pixel_x & TILE_MASK != tile_x || pixel_y & TILE_MASK != tile_y) {
;				tile_x = pixel_x & TILE_MASK
;				tile_y = pixel_y & TILE_MASK
;
;				flush_buffer()
;				clear_buffer()
;			}
;		}
;
;	}

.PUSHSEG
	.RODATA
	table:
	.BYTE	%10000000, %01000000, %00100000, %00010000
	.BYTE	%00001000, %00000100, %00000010, %00000001

	plot_lo:
	.REPEAT 32, i
		.LOBYTES	name_buffer + 32 * i
	.ENDREP

	plot_hi:
	.REPEAT	32, i
		.HIBYTES	name_buffer + 32 * i
	.ENDREP
.POPSEG

.ENDPROC
.INCLUDE	"nes.h"
.INCLUDE	"render.h"
.INCLUDE	"nmi.h"
.INCLUDE	"math.h"
.INCLUDE	"objects.h"



.ZEROPAGE
display_list_indices:			.RES 32
display_list_size:				.RES 1

; Camera parameters
camera_pos_sub:
camera_pos_x_sub:				.RES NUM_CAMERAS
camera_pos_y_sub:				.RES NUM_CAMERAS
camera_pos_z_sub:				.RES NUM_CAMERAS
camera_pos_lo:
camera_pos_x_lo:				.RES NUM_CAMERAS
camera_pos_y_lo:				.RES NUM_CAMERAS
camera_pos_z_lo:				.RES NUM_CAMERAS
camera_pos_hi:
camera_pos_x_hi:				.RES NUM_CAMERAS
camera_pos_y_hi:				.RES NUM_CAMERAS
camera_pos_z_hi:				.RES NUM_CAMERAS
camera_pitch_lo:				.RES NUM_CAMERAS
camera_pitch_hi:				.RES NUM_CAMERAS
camera_yaw_lo:					.RES NUM_CAMERAS
camera_yaw_hi:					.RES NUM_CAMERAS
camera_roll_lo:					.RES NUM_CAMERAS
camera_roll_hi:					.RES NUM_CAMERAS

; Rotation matrices
camera_matrix:					.REPEAT NUM_CAMERAS 
              						.TAG ROT_MATRIX 
              					.ENDREPEAT
object_matrix:					.TAG ROT_MATRIX
combined_matrix:				.TAG ROT_MATRIX



.BSS
display_list_polys:				.RES 256
vertex_cache_x_lo:				.RES MESH_MAX_VERTICES
vertex_cache_x_hi:				.RES MESH_MAX_VERTICES
vertex_cache_y_lo:				.RES MESH_MAX_VERTICES
vertex_cache_y_hi:				.RES MESH_MAX_VERTICES
vertex_cache_z_lo:				.RES MESH_MAX_VERTICES
vertex_cache_z_hi:				.RES MESH_MAX_VERTICES



.CODE
.PROC	render_frame
init:
	; Effectively clear display list
	LDA #$00
	STA display_list_size

	; Generate camera rotation matrix
	LDA camera_roll_hi
	LDX camera_yaw_hi
	LDY camera_pitch_hi
	JSR setup_rot_matrix
	LDX #.SIZEOF(ROT_MATRIX)
:	LDA object_matrix - 1, X
	STA camera_matrix - 1, X
	DEX
	BNE :-

	LDX #$00
	JSR render_object

	LDA #$01
	STA camera_pos_z_lo
;	STA camera_roll_hi
;	INC camera_pitch_hi

;	JSR sort_display_list
;	JSR draw_display_list

	RTS
.ENDPROC

;
;	Takes: Signed 16-bit cameraspace vertex coordinates in vertex_x, vertex_y, and vertex_z
;	Returns: Signed 16-bit projected vertex coordinates in vertex_x and vertex_y
;	Clobbers: A, X, Y
.PROC	project_point
	vertex_x		:= $FC	; And $FD
	vertex_y		:= $FE	; And $FF
	vertex_z		:= $FA	; And $FB
	log_z			:= $FA

check_z:
	LDY #$00
	LDX vertex_z + 0
	LDA vertex_z + 1
	CMP #$01
	BEQ get_reciprocal

; Shift vertex_z right until it's in the range 256-511, i.e. until the hi byte is $01, and record the number of shifts in Y
shift_z:
	TXA
	LSR vertex_z + 1
:	INY
	ROR
	LSR vertex_z + 1	; Hi byte is shifted until it's $00, but we only need the lo byte and it's not shifted on the final iteration
	BNE :-
	TAX

; Get the reciprocal of the shifted vertex_z, vertex_x and vertex_y are multiplied by this instead of dividing by vertex_z
; Also store the number of shifts
get_reciprocal:
	STY log_z
	LDA reciprocal_lo, X

; Setup 8-bit multiplier
set_mul:
	STA mul_sq1_lo_ptr_0
	STA mul_sq1_hi_ptr_0
	EOR #$FF
	STA mul_sq2_lo_ptr_0
	STA mul_sq2_hi_ptr_0

; Get the hi 16 bits of the product between vertex_x and the reciprocal
mul_x:
	LDY vertex_x + 0
	LDA (mul_sq1_hi_ptr_0), Y
	SEC
	SBC (mul_sq2_hi_ptr_0), Y
	TAX

	LDY vertex_x + 1
	LDA (mul_sq1_lo_ptr_0), Y
	SEC
	SBC (mul_sq2_lo_ptr_0), Y
	STA vertex_x + 0

	LDA (mul_sq1_hi_ptr_0), Y
	SBC (mul_sq2_hi_ptr_0), Y

	; If vertex_x was negative, we need to subtract the reciprocal from the hi byte
	BIT vertex_x + 1
	BPL :+
		SEC
		SBC mul_sq1_lo_ptr_0 + 0
:	STA vertex_x + 1

	TXA
	CLC
	ADC vertex_x + 0
	BCC :+
		INC vertex_x + 1
:	STA vertex_x + 0

; Get the hi 16 bits of the product between vertex_y and the reciprocal
mul_y:
	LDY vertex_y + 0
	LDA (mul_sq1_hi_ptr_0), Y
	SEC
	SBC (mul_sq2_hi_ptr_0), Y
	TAX

	LDY vertex_y + 1
	LDA (mul_sq1_lo_ptr_0), Y
	SEC
	SBC (mul_sq2_lo_ptr_0), Y
	STA vertex_y + 0

	LDA (mul_sq1_hi_ptr_0), Y
	SBC (mul_sq2_hi_ptr_0), Y

	; If vertex_y was negative, we need to subtract the reciprocal from the hi byte
	BIT vertex_y + 1
	BPL :+
		SEC
		SBC mul_sq1_lo_ptr_0 + 0
:	STA vertex_y + 1

	TXA
	CLC
	ADC vertex_y + 0
	BCC :+
		INC vertex_y + 1
:	STA vertex_y + 0

; Shift output right the same number of times vertex_z was shifted to undo the implicit multiplication
shift_output:
	LDY log_z
	BEQ exit

	LDA vertex_x + 1
:	CMP #$80
	ROR
	ROR vertex_x + 0
	DEY
	BNE :-
	STA vertex_x + 1

	LDY log_z
	LDA vertex_y + 1
:	CMP #$80
	ROR
	ROR vertex_y + 0
	DEY
	BNE :-
	STA vertex_y

exit:
	RTS
.ENDPROC

; Multiplies a point provided in
;	Takes: 7-bit signed input vector in $17, $18, $19 (x, y, z)
;	Returns: 16-bit signed output vector in $1A - $1B, $1C - $1D, $1E - $1F (x, y, z)
;	Clobbers: A, X, Y, $17 - $1F
.PROC	transform_point_combined_matrix_old
	input_x			:= $17
	input_y			:= $18
	input_z			:= $19
	output_x		:= $1A	; And $1B
	output_y		:= $1C	; And $1D
	output_z		:= $1E	; And $1F

column_x:
	LDA input_x
	SET_FAST_MUL

	@row_x:
		LDY camera_matrix + ROT_MATRIX::XX
		FAST_MUL output_x + 0
		STA output_x + 1

	@row_y:
		LDY camera_matrix + ROT_MATRIX::XY
		FAST_MUL output_y + 0
		STA output_y + 1

	@row_z:
		LDY camera_matrix + ROT_MATRIX::XZ
		FAST_MUL output_z + 0
		STA output_z + 1

column_y:
	LDA input_y
	SET_FAST_MUL

	@row_x:
		LDY camera_matrix + ROT_MATRIX::YX
		FAST_MUL
		TAY
		TXA
		CLC
		ADC output_x + 0
		STA output_x + 0
		TYA
		ADC output_x + 1
		STA output_x + 1

	@row_y:
		LDY camera_matrix + ROT_MATRIX::YY
		FAST_MUL
		TAY
		TXA
		CLC
		ADC output_y + 0
		STA output_y + 0
		TYA
		ADC output_y + 1
		STA output_y + 1

	@row_z:
		LDY camera_matrix + ROT_MATRIX::YZ
		FAST_MUL
		TAY
		TXA
		CLC
		ADC output_z + 0
		STA output_z + 0
		TYA
		ADC output_z + 1
		STA output_z + 1

column_z:
	LDA input_z
	SET_FAST_MUL

	@row_x:
		LDY camera_matrix + ROT_MATRIX::ZX
		FAST_MUL
		TAY
		TXA
		CLC
		ADC output_x + 0
		STA output_x + 0
		TYA
		ADC output_x + 1
		STA output_x + 1

	@row_y:
		LDY camera_matrix + ROT_MATRIX::ZY
		FAST_MUL
		TAY
		TXA
		CLC
		ADC output_y + 0
		STA output_y + 0
		TYA
		ADC output_y + 1
		STA output_y + 1

	@row_z:
		LDY camera_matrix + ROT_MATRIX::ZZ
		FAST_MUL
		TAY
		TXA
		CLC
		ADC output_z + 0
		STA output_z + 0
		TYA
		ADC output_z + 1
		STA output_z + 1

exit:
	RTS
.ENDPROC

; Multiplies a point provided in
;	Takes: 7-bit signed input vector in $17, $18, $19 (x, y, z)
;	Returns: 16-bit signed output vector in $1A - $1B, $1C - $1D, $1E - $1F (x, y, z)
;	Clobbers: A, X, Y, $17 - $1F
.PROC	transform_point_combined_matrix
	input_x			:= $1A
	input_y			:= $1B
	input_z			:= $1C
	output_x		:= $1D
	output_y		:= $1E
	output_z		:= $1F

column_x:
	LDA input_x
	SET_FAST_MUL

	@row_x:
		LDY camera_matrix + ROT_MATRIX::XX
		FAST_MUL
		STA output_x

	@row_y:
		LDY camera_matrix + ROT_MATRIX::XY
		FAST_MUL
		STA output_y

	@row_z:
		LDY camera_matrix + ROT_MATRIX::XZ
		FAST_MUL
		STA output_z

column_y:
	LDA input_y
	SET_FAST_MUL

	@row_x:
		LDY camera_matrix + ROT_MATRIX::YX
		FAST_MUL
		CLC
		ADC output_x
		STA output_x

	@row_y:
		LDY camera_matrix + ROT_MATRIX::YY
		FAST_MUL
		CLC
		ADC output_y
		STA output_y

	@row_z:
		LDY camera_matrix + ROT_MATRIX::YZ
		FAST_MUL
		CLC
		ADC output_z
		STA output_z

column_z:
	LDA input_z
	SET_FAST_MUL

	@row_x:
		LDY camera_matrix + ROT_MATRIX::ZX
		FAST_MUL
		CLC
		ADC output_x
		STA output_x

	@row_y:
		LDY camera_matrix + ROT_MATRIX::ZY
		FAST_MUL
		CLC
		ADC output_y
		STA output_y

	@row_z:
		LDY camera_matrix + ROT_MATRIX::ZZ
		FAST_MUL
		CLC
		ADC output_z
		STA output_z

exit:
	RTS
.ENDPROC

;
.PROC	render_object
	object_pos_sub			:= $00	; And $01, $02. Stored in X, Y, Z order
	object_pos_lo			:= $03	; And $04, $05. Stored in X, Y, Z order
	object_pos_hi			:= $06	; And $07, $08. Stored in X, Y, Z order
	mesh_rel_pos_lo			:= $00	; And $01, $02. Stored in X, Y, Z order
	mesh_rel_pos_hi			:= $03	; And $04, $05. Stored in X, Y, Z order
	mesh_cameraspace_x		:= $06	; And $07, $08
	mesh_cameraspace_y		:= $09	; And $0A, $0B
	mesh_cameraspace_z		:= $0C	; And $0D, $0E
	loop_count				:= $0F
	mesh_ptr				:= $10	; And $11. Points to mesh data
	mesh_num_polys			:= $12
	mesh_vertices_x_ptr		:= $00	; And $01. Points to list of vertex X components
	mesh_vertices_y_ptr		:= $02	; And $03. Points to list of vertex Y components
	mesh_vertices_z_ptr		:= $04	; And $05. Points to list of vertex Z components
	mesh_poly_ptr			:= $13	; And $14. Points to list of polygons	
	poly_num_vertices		:= $15
	poly_cur_vertex			:= $16

	LDA object_pos_x_sub, X
	STA object_pos_sub + 0
	LDA object_pos_y_sub, X
	STA object_pos_sub + 1
	LDA object_pos_z_sub, X
	STA object_pos_sub + 2
	LDA object_pos_x_lo, X
	STA object_pos_lo + 0
	LDA object_pos_y_lo, X
	STA object_pos_lo + 1
	LDA object_pos_z_lo, X
	STA object_pos_lo + 2
	LDA object_pos_x_hi, X
	STA object_pos_hi + 0
	LDA object_pos_y_hi, X
	STA object_pos_hi + 1
	LDA object_pos_z_hi, X
	STA object_pos_hi + 2

; Get mesh's position relative to the camera, and cull meshes that are farther than 32767 units away from the camera
; mesh_rel_pos = object_pos - camera_pos
; if (|mesh_rel_pos| > 32767) then return
compute_rel_pos:
	LDX #$02
@loop:
	LDA object_pos_sub, X
	SEC
	SBC camera_pos_sub, X
	STA mesh_rel_pos_lo, X

	LDA object_pos_lo, X
	SBC camera_pos_lo, X
	STA mesh_rel_pos_hi, X

	LDA object_pos_hi, X
	SBC camera_pos_hi, X
	BEQ @keep_mesh					; Check if mesh is greater than 32767 units away from the camera in a given axis
	CMP #$FF
	BEQ @keep_mesh
@cull_mesh:
	RTS
@keep_mesh:
	DEX
	BPL @loop

; Compute mesh's cameraspace position by multiplying its relative position vector by the current camera's rotation matrix
; mesh_cameraspace_x = mesh_rel_x * camera_matrix.xx + mesh_rel_y * camera_matrix.yx + mesh_rel_z * camera_matrix.zx
; mesh_cameraspace_y = mesh_rel_x * camera_matrix.xy + mesh_rel_y * camera_matrix.yy + mesh_rel_z * camera_matrix.zy
; mesh_cameraspace_z = mesh_rel_x * camera_matrix.xz + mesh_rel_y * camera_matrix.yz + mesh_rel_z * camera_matrix.zz
compute_cameraspace_pos:
	; Clear cameraspace position
	LDA #$00
	LDX #3 * 3 - 1
:	STA mesh_cameraspace_x, X
	DEX
	BPL :-

	LDX #$02
	STX loop_count
@loop:
	LDA mesh_rel_pos_lo, X
	LDY mesh_rel_pos_hi, X
	JSR set_mul_16x8bit_signed
@row_x:
	LDX loop_count
	LDY camera_matrix + ROT_MATRIX::XX, X
	JSR mul_16x8bit_signed
	PHA
	CLC
	TXA
	ADC mesh_cameraspace_x + 0
	STA mesh_cameraspace_x + 0
	TYA
	ADC mesh_cameraspace_x + 1
	STA mesh_cameraspace_x + 1
	PLA
	ADC mesh_cameraspace_x + 2
	STA mesh_cameraspace_x + 2

@row_y:
	LDX loop_count
	LDY camera_matrix + ROT_MATRIX::XY, X
	JSR mul_16x8bit_signed
	PHA
	CLC
	TXA
	ADC mesh_cameraspace_y + 0
	STA mesh_cameraspace_y + 0
	TYA
	ADC mesh_cameraspace_y + 1
	STA mesh_cameraspace_y + 1
	PLA
	ADC mesh_cameraspace_y + 2
	STA mesh_cameraspace_y + 2

@row_z:
	LDX loop_count
	LDY camera_matrix + ROT_MATRIX::XZ, X
	JSR mul_16x8bit_signed
	PHA
	CLC
	TXA
	ADC mesh_cameraspace_z + 0
	STA mesh_cameraspace_z + 0
	TYA
	ADC mesh_cameraspace_z + 1
	STA mesh_cameraspace_z + 1
	PLA
	ADC mesh_cameraspace_z + 2
	STA mesh_cameraspace_z + 2

@check_loop:
	DEC loop_count
	LDX loop_count
	BPL @loop

; Cull the current mesh if it's sufficiently outside the view frustum
frustum_cull:

; At this point we're committed to rendering this mesh, so we need to extract the mesh data
get_mesh_data:
	LDA #<cube
	STA mesh_ptr + 0
	LDA #>cube
	STA mesh_ptr + 1

	LDY #$00
@get_num_polys:
	LDA (mesh_ptr), Y
	STA mesh_num_polys

@get_vertices_x_ptr:
	INY
	LDA (mesh_ptr), Y
	STA mesh_vertices_x_ptr + 0
	INY
	LDA (mesh_ptr), Y
	STA mesh_vertices_x_ptr + 1

@get_vertices_y_ptr:
	INY
	LDA (mesh_ptr), Y
	STA mesh_vertices_y_ptr + 0
	INY
	LDA (mesh_ptr), Y
	STA mesh_vertices_y_ptr + 1

@get_vertices_z_ptr:
	INY
	LDA (mesh_ptr), Y
	STA mesh_vertices_z_ptr + 0
	INY
	LDA (mesh_ptr), Y
	STA mesh_vertices_z_ptr + 1

@get_poly_ptr:
	INY
	LDA (mesh_ptr), Y
	STA mesh_poly_ptr + 0
	INY
	LDA (mesh_ptr), Y
	STA mesh_poly_ptr + 1
	
; Set the X component of all entries in the vertex cache to an invalid value ($80) to indicate that they haven't been populated yet
; NOTE: Partially unroll this loop maybe?
clear_vertex_cache:
	LDX #MESH_MAX_VERTICES - 1
	LDA #$80
:	STA vertex_cache_x_hi, X
	DEX
	BPL :-

;
draw_polygons:
	LDY #$00
	STY loop_count
@outer_loop:
	LDA (mesh_poly_ptr), Y
	STA poly_num_vertices

	INY
	LDA (mesh_poly_ptr), Y
	TAY


	LDA #$08
	STA poly_num_vertices
	LDY #$00
	STY loop_count
@test_loop:
	LDA vertex_cache_x_hi, Y
	CMP #$80
	BNE @cached_vertex

@transform_vertex:
	LDA (mesh_vertices_x_ptr), Y
	STA transform_point_combined_matrix::input_x
	LDA (mesh_vertices_y_ptr), Y
	STA transform_point_combined_matrix::input_y
	LDA (mesh_vertices_z_ptr), Y
	STA transform_point_combined_matrix::input_z

	JSR transform_point_combined_matrix

	LDY loop_count
	LDA transform_point_combined_matrix::output_x + 0
	STA vertex_cache_x_lo, Y
	LDA transform_point_combined_matrix::output_x + 1
	STA vertex_cache_x_hi, Y
	LDA transform_point_combined_matrix::output_y + 0
	STA vertex_cache_y_lo, Y
	LDA transform_point_combined_matrix::output_y + 1
	STA vertex_cache_y_hi, Y
	LDA transform_point_combined_matrix::output_z + 0
	STA vertex_cache_z_lo, Y
	LDA transform_point_combined_matrix::output_z + 1
	STA vertex_cache_z_hi, Y

@cached_vertex:

	LDY loop_count

	LDA vertex_cache_x_lo, Y
	CLC
	ADC mesh_cameraspace_x + 0
	STA project_point::vertex_x + 0
	LDA vertex_cache_x_hi, Y
	ADC mesh_cameraspace_x + 1
	STA project_point::vertex_x + 1

	LDA vertex_cache_y_lo, Y
	CLC
	ADC mesh_cameraspace_y + 0
	STA project_point::vertex_y + 0
	LDA vertex_cache_y_hi, Y
	ADC mesh_cameraspace_y + 1
	STA project_point::vertex_y + 1

	LDA vertex_cache_z_lo, Y
	CLC
	ADC mesh_cameraspace_z + 0
	STA project_point::vertex_z + 0
	LDA vertex_cache_z_hi, Y
	ADC mesh_cameraspace_z + 1
	STA project_point::vertex_z + 1
	BEQ :+

;	JSR project_point

	LDA project_point::vertex_x + 1
	CLC
	ADC #$80
	TAX
	LDA project_point::vertex_y + 1
	CLC
	ADC #$80
	JSR plot_point

:

;	LDA vertex_cache_z_lo, Y
;	CLC
;	ADC mesh_cameraspace_z + 0
;	TAY
;	LDA vertex_cache_z_hi, Y
;	ADC mesh_cameraspace_z + 1
;	TAX
;	TYA
;	JSR reciprocal_16bit_unsigned
;	JSR set_mul_16x16bit_unsigned_hi16
;
;	LDX loop_count
;	LDY #$00
;	LDA vertex_cache_y_hi, X
;	CLC
;	ADC mesh_cameraspace_y + 1
;	LDA vertex_cache_y_lo, X
;	CLC
;	ADC mesh_cameraspace_y + 0
;	TAY
;	LDA vertex_cache_y_hi, X
;	ADC mesh_cameraspace_y + 1
;	JSR mul_16x16bit_unsigned_hi16
;	TYA
;	CLC
;	ADC #$80
;	STA $FE
;
;	LDX loop_count
;	LDY #$00
;	LDA vertex_cache_x_hi, X
;	CLC
;	ADC mesh_cameraspace_x + 1
;	LDA vertex_cache_x_lo, X
;	CLC
;	ADC mesh_cameraspace_x + 0
;	TAY
;	LDA vertex_cache_x_hi, X
;	ADC mesh_cameraspace_x + 1
;	JSR mul_16x16bit_unsigned_hi16
;	TYA
;	CLC
;	ADC #$80
;	STA $FF


;	screen_x = real_x / real_z


;	LDX loop_count
;	LDA vertex_cache_y_hi, X
;	ASL vertex_cache_y_lo, X
;	ROL
;	ASL vertex_cache_y_lo, X
;	ROL
;	CLC
;	ADC mesh_cameraspace_y + 1
;	CLC
;	ADC #$80
;	TAY
;
;	LDA vertex_cache_x_hi, X
;	ASL vertex_cache_x_lo, X
;	ROL
;	ASL vertex_cache_x_lo, X
;	ROL
;	CLC
;	ADC mesh_cameraspace_x + 1
;	CLC
;	ADC #$80
;	TAX
;	TYA
;	LDA $FE
;	LDX $FF
;	JSR plot_point

	INC loop_count
	LDY loop_count
	CPY poly_num_vertices
	BEQ :+
	JMP @test_loop
:

draw:
	LDA mesh_cameraspace_x + 1
	CLC
	ADC #$80
	TAX

	LDA mesh_cameraspace_y + 1
	CLC
	ADC #$80
	JSR plot_point

	STA $4444

	RTS
.ENDPROC

; Sets up a rotation matrix based on Tait-Bryan angles provided
;	Takes: Yaw in X, pitch in Y, roll in A
;	Returns: Rotation matrix in object_matrix
;	Clobbers: A, X, Y, $1B - $1F
;	~411 cycles
.PROC	setup_rot_matrix
yaw			:= $1B		; Tait-Bryan angles
pitch		:= $1C
roll		:= $1D

y_plus_p	:= $1E		; Common angle calculations
y_minus_p	:= $1F

	STX yaw
	STY pitch
	STA roll

; xx = qcos(y-p) + qcos(y+p)
; xy = qsin(y+p) + qsin(y-p)
compute_xx_xy:
	LDA yaw
	SEC
	SBC pitch
	STA y_minus_p
	TAY

	LDA yaw
	CLC
	ADC pitch
	STA y_plus_p
	TAX

	LDA qcos, Y
	CLC
	ADC qcos, X
	STA object_matrix + ROT_MATRIX::XX

	LDA qsin, X
	CLC
	ADC qsin, Y
	STA object_matrix + ROT_MATRIX::YX

; zx = -hsin(p)
compute_zx:
	LDA pitch
	CLC
	ADC #$80
	TAX

	LDA hsin, X
	STA object_matrix + ROT_MATRIX::ZX

; zy = qsin(p+r) - qsin(p-r)
; zz = qcos(p-r) + qcos(p+r)
compute_zy_zz:
	LDA pitch
	CLC
	ADC roll
	TAY

	LDA pitch
	SEC
	SBC roll
	TAX

	LDA qsin, Y
	SEC
	SBC qsin, X
	STA object_matrix + ROT_MATRIX::ZY

	LDA qcos, X
	CLC
	ADC qcos, Y
	STA object_matrix + ROT_MATRIX::ZZ

; xy = ecos(y-p-r) - ecos(y+p-r) + qsin(y-r)
; yz = ecos(y-p-r) - ecos(y+p-r) + qsin(y-r)
compute_xy_yz:
	LDA y_minus_p
	SEC
	SBC roll
	TAY

	LDA y_plus_p
	SEC
	SBC roll
	TAX
	LDA ecos, Y
	SEC
	SBC ecos, X
	TAY

	LDA yaw
	SEC
	SBC roll
	TAX
	TYA
	CLC
	ADC qsin, X
	STA object_matrix + ROT_MATRIX::XY
	STA object_matrix + ROT_MATRIX::YZ

; xy = ecos(y-p+r) - ecos(y+p+r) - qsin(y+r) - xy
; yz = ecos(y-p+r) - ecos(y+p+r) - qsin(y+r) + xy
	LDA y_minus_p
	CLC
	ADC roll
	TAY

	LDA y_plus_p
	CLC
	ADC roll
	TAX
	LDA ecos, Y
	SEC
	SBC ecos, X
	TAY

	LDA yaw
	CLC
	ADC roll
	TAX
	TYA
	SEC
	SBC qsin, X
	TAY
	SEC
	SBC object_matrix + ROT_MATRIX::XY
	STA object_matrix + ROT_MATRIX::XY

	TYA
	CLC
	ADC object_matrix + ROT_MATRIX::YZ
	STA object_matrix + ROT_MATRIX::YZ

; xz = esin(y-p+r) - esin(y+p+r) + qcos(y+r)
; yy = esin(y-p+r) - esin(y+p+r) + qcos(y+r)
compute_xz_yy:
	LDA y_minus_p
	CLC
	ADC roll
	TAY

	LDA y_plus_p
	CLC
	ADC roll
	TAX
	LDA esin, Y
	SEC
	SBC esin, X
	TAY

	LDA yaw
	CLC
	ADC roll
	TAX
	TYA
	CLC
	ADC qcos, X
	STA object_matrix + ROT_MATRIX::XZ
	STA object_matrix + ROT_MATRIX::YY

; xz = esin(y+p-r) - esin(y-p-r) + qcos(y-r) - xz
; yy = esin(y+p-r) - esin(y-p-r) + qcos(y-r) + yy
	LDA y_plus_p
	SEC
	SBC roll
	TAY

	LDA y_minus_p
	SEC
	SBC roll
	TAX
	LDA esin, Y
	SEC
	SBC esin, X
	TAY

	LDA yaw
	SEC
	SBC roll
	TAX
	TYA
	CLC
	ADC qcos, X
	TAY
	SEC
	SBC object_matrix + ROT_MATRIX::XZ
	STA object_matrix + ROT_MATRIX::XZ

	TYA
	CLC
	ADC object_matrix + ROT_MATRIX::YY
	STA object_matrix + ROT_MATRIX::YY

	STA $4400
	RTS

; xy = ecos(y+p+r) + ecos(y+p-r) - qsin(y-r)
; xz = ecos(y+p+r) + ecos(y+p-r) - qsin(y-r)
compute_xy_xz:
	LDA y_plus_p
	CLC
	ADC roll
	TAY

	LDA y_plus_p
	SEC
	SBC roll
	TAX
	LDA ecos, Y
	CLC
	ADC ecos, X
	TAY

	LDA yaw
	SEC
	SBC roll
	TAX
	TYA
	SEC
	SBC qsin, X
	STA object_matrix + ROT_MATRIX::XY
	STA object_matrix + ROT_MATRIX::XZ

; xy = ecos(y-p+r) + ecos(y-p-r) - qsin(y+r) + xy
; xz = ecos(y-p+r) + ecos(y-p-r) - qsin(y+r) - xz
	LDA y_minus_p
	CLC
	ADC roll
	TAY

	LDA y_minus_p
	SEC
	SBC roll
	TAX
	LDA ecos, Y
	CLC
	ADC ecos, X
	TAY

	LDA yaw
	CLC
	ADC roll
	TAX
	TYA
	SEC
	SBC qsin, X
	TAY
	CLC
	ADC object_matrix + ROT_MATRIX::XY
	STA object_matrix + ROT_MATRIX::XY

	TYA
	SEC
	SBC object_matrix + ROT_MATRIX::XZ
	STA object_matrix + ROT_MATRIX::XZ

; yy = esin(y-p+r) - esin(y+p+r) + qcos(y+r)
; yz = esin(y-p+r) - esin(y+p+r) + qcos(y+r)
compute_yy_yz:
	LDA y_minus_p
	CLC
	ADC roll
	TAY

	LDA y_plus_p
	CLC
	ADC roll
	TAX
	LDA esin, Y
	SEC
	SBC esin, X
	TAY

	LDA yaw
	CLC
	ADC roll
	TAX
	TYA
	CLC
	ADC qcos, X
	STA object_matrix + ROT_MATRIX::YY
	STA object_matrix + ROT_MATRIX::YZ

; yy = esin(y+p-r) - esin(y-p-r) + qcos(y-r) + yy
; yz = esin(y+p-r) - esin(y-p-r) + qcos(y-r) - yz
	LDA y_plus_p
	SEC
	SBC	roll
	TAY

	LDA y_minus_p
	SEC
	SBC roll
	TAX
	LDA esin, Y
	SEC
	SBC esin, X
	TAY

	LDA yaw
	SEC
	SBC roll
	TAX
	TYA
	CLC
	ADC qcos, X
	TAY
	CLC
	ADC object_matrix + ROT_MATRIX::YY
	STA object_matrix + ROT_MATRIX::YY

	TYA
	SEC
	SBC object_matrix + ROT_MATRIX::YZ
	STA object_matrix + ROT_MATRIX::YZ

	STA $4400
	RTS
.ENDPROC

; Premultiplies object_matrix by camera_matrix and stores the result in combined_matrix
;	Could do with its own multiplication routine, as its precision requirements are unique
;	Could proooobably massage it to loop 9 times instead of 3 to reduce code size, but matrix math is melting my brain so not today. 
;	Plus it would increase run time by a fair bit, 3 extra zeropage loads per iteration-ish I think.
;	Clobbers: A, X, Y, $1F
.PROC	matrix_multiply
	temporo			:= $1F

	STX temporo
loop:
	LDA camera_matrix + ROT_MATRIX::XX, X
	SET_FAST_MUL

	LDY object_matrix + ROT_MATRIX::XX
	FAST_MUL
	CPX #$80
	ROL
	STA combined_matrix + ROT_MATRIX::XX


; Replace with this :/
	CPX #$80
	ROL
	STA combined_matrix + ROT_MATRIX::XX
	TXA
	ASL
	ASL
	ROL combined_matrix + ROT_MATRIX::XX

	LDY object_matrix + ROT_MATRIX::XY
	FAST_MUL
	CPX #$80
	ROL
	STA combined_matrix + ROT_MATRIX::XY

	LDY object_matrix + ROT_MATRIX::XZ
	FAST_MUL
	CPX #$80
	ROL
	STA combined_matrix + ROT_MATRIX::XZ

	LDX temporo
	LDA camera_matrix + ROT_MATRIX::XY, X
	SET_FAST_MUL

	LDY object_matrix + ROT_MATRIX::YX
	FAST_MUL
	CPX #$80
	ROL
	CLC
	ADC combined_matrix + ROT_MATRIX::XX
	STA combined_matrix + ROT_MATRIX::XX

	LDY object_matrix + ROT_MATRIX::YY
	FAST_MUL
	CPX #$80
	ROL
	CLC
	ADC combined_matrix + ROT_MATRIX::XY
	STA combined_matrix + ROT_MATRIX::XY

	LDY object_matrix + ROT_MATRIX::YZ
	FAST_MUL
	CPX #$80
	ROL
	CLC
	ADC combined_matrix + ROT_MATRIX::XZ
	STA combined_matrix + ROT_MATRIX::XZ

	LDX temporo
	LDA camera_matrix + ROT_MATRIX::XZ, X
	SET_FAST_MUL

	LDY object_matrix + ROT_MATRIX::ZX
	FAST_MUL
	CPX #$80
	ROL
	CLC
	ADC combined_matrix + ROT_MATRIX::XX
	STA combined_matrix + ROT_MATRIX::XX

	LDY object_matrix + ROT_MATRIX::ZY
	FAST_MUL
	CPX #$80
	ROL
	CLC
	ADC combined_matrix + ROT_MATRIX::XY
	STA combined_matrix + ROT_MATRIX::XY

	LDY object_matrix + ROT_MATRIX::ZZ
	FAST_MUL
	CPX #$80
	ROL
	CLC
	ADC combined_matrix + ROT_MATRIX::XZ
	STA combined_matrix + ROT_MATRIX::XZ

	LDX temporo
	INX
	CPX #.SIZEOF(ROT_MATRIX)
	BEQ :+
	JMP loop
:

	RTS
.ENDPROC

; Sorts display_list_indices from nearest to farthest
;	Requires display_list_indices to be in zp
;	Clobbers: A, X, Y, $1F
.PROC	sort_display_list
	outer_loop_count	:= $1F

	LDA display_list_size
	STA outer_loop_count
outer_loop:
	LDX #$01
inner_loop:
	LDY display_list_indices - 0, X
	LDA display_list_polys + SCREEN_POLY::DEPTH_HI, Y
	LDY display_list_indices - 1, X
	CMP display_list_polys + SCREEN_POLY::DEPTH_HI, Y
	BCC check_inner
	BNE swap_indices
	LDA display_list_polys + SCREEN_POLY::DEPTH_LO, Y
	LDY display_list_indices - 0, X
	CMP display_list_polys + SCREEN_POLY::DEPTH_LO, Y
	BCS check_inner

swap_indices:
	LDA display_list_indices - 0, X
	STA display_list_indices - 1, X
	STY display_list_indices - 0, X

check_inner:
	INX
	CPX outer_loop_count
	BNE inner_loop

check_outer:
	LDA #$01
	DCP outer_loop_count
	BNE outer_loop

exit:
	RTS
.ENDPROC

;
.PROC	draw_display_list
	cur_poly		:= $00
	cur_vertex		:= $01
	num_vertices	:= $02

	LDX #$00
outer_loop:
	LDY display_list_indices, X
	LDA display_list_polys + SCREEN_POLY::ATTR, Y
	STA num_vertices
	STX cur_poly
inner_loop:
	LDA display_list_polys + SCREEN_POLY::X_POS, Y
	TAX
	LDA display_list_polys + SCREEN_POLY::Y_POS, Y
	STY cur_vertex
	JSR plot_point

	LDY cur_vertex
	INY
	INY
	DEC num_vertices
	BNE inner_loop

	DEC display_list_size
	BNE outer_loop

	RTS
.ENDPROC

; Plots a point on the screen
;	Takes: X position in A, and Y position in Y
;	Clobbers: A, X, Y
.PROC	plot_point
	LDY oam_index

	STA oam + OAM::Y_POS, Y
	TXA
	STA oam + OAM::X_POS, Y
	LDA #$00
	STA oam + OAM::ATTR, Y
	LDA #$01
	STA oam + OAM::TILE, Y

	INY
	INY
	INY
	INY

	STY oam_index

	RTS
.ENDPROC


.RODATA
.PROC	cube
.BYTE	$06					; Number of polygons
.WORD	cube_vertices_x
.WORD	cube_vertices_y
.WORD	cube_vertices_z
.WORD	cube_polys

cube_vertices_x:
.BYTE	$10, $10, $F0, $E0, $10, $10, $F0, $F0
cube_vertices_y:
.BYTE	$10, $F0, $F0, $10, $10, $F0, $F0, $10
cube_vertices_z:
.BYTE	$10, $10, $10, $10, $F0, $F0, $F0, $F0

cube_polys:
.BYTE	$04
.BYTE	$00, $01, $02, $03
.BYTE	$04
.BYTE	$04, $05, $06, $07
.BYTE	$04
.BYTE	$00, $01, $05, $04
.BYTE	$04
.BYTE	$02, $03, $07, $06
.BYTE	$04
.BYTE	$01, $02, $06, $05
.BYTE	$04
.BYTE	$00, $03, $07, $04

.ENDPROC